#textdomain wesnoth-Galuldur

#define 06_07_EERIE_MESSAGE EERIE_TURN
    [event]
        name=new turn
        first_time_only=no

        [if]
            [variable]
                name=turn_number
                equals={EERIE_TURN}
            [/variable]

            [then]
                {MESSAGE_GALULDUR Vaddan "" "" _"It's eerily quiet here. No animals, no stray orcs, nothing. Something's not right. Let's be careful and not spread out too much."}
                {MESSAGE_GALULDUR Norfindil "" "" _"That's just because all the orcs are attacking Ultwildir. Stop making everybody nervous!"}
                {CLEAR_VARIABLE eerie_turn}
            [/then]
        [/if]
    [/event]
#enddef

#define NORFINDIL_TRANSFORMATION SIDE X Y FACING
    # Transform Norfindil to an undead and move him to their side
    # @SIDE: Side to which Norfindil is converted
    # @X,@Y: coordinates where he is moved

    {MESSAGE_FACING Undead_Leader Norfindil "" _"I bet you did not expect this!"}

    {STORE_UNIT_VAR id=Norfindil level Norfindil_level}
    [if]
        [variable]
            name=Norfindil_level
            equals=2
        [/variable]

        [then]
            {VARIABLE change_from (Elvish Ranger)}
            {VARIABLE change_to (Bone Shooter)}
        [/then]

        [else]
            {VARIABLE change_from (Elvish Avenger)}
            {VARIABLE change_to (Banebow)}
        [/else]
    [/if]

    {SOUND magic-missile-1.ogg}
    [animate_unit]
        [filter]
            id=Norfindil
        [/filter]

        flag=levelout
        with_bars=yes
    [/animate_unit]
    {TRANSFORM_UNIT id=Norfindil $change_to}
    [animate_unit]
        [filter]
            id=Norfindil
        [/filter]

        flag=levelin
        with_bars=yes
    [/animate_unit]
    {SOUND magic-missile-1.ogg}
    [animate_unit]
        [filter]
            id=Norfindil
        [/filter]

        flag=levelout
        with_bars=yes
    [/animate_unit]
    {TRANSFORM_UNIT id=Norfindil $change_to}
    [animate_unit]
        [filter]
            id=Norfindil
        [/filter]

        flag=levelin
        with_bars=yes
    [/animate_unit]
    {SOUND magic-missile-1.ogg}
    [animate_unit]
        [filter]
            id=Norfindil
        [/filter]

        flag=levelout
        with_bars=yes
    [/animate_unit]
    {TRANSFORM_UNIT id=Norfindil $change_from}
    [animate_unit]
        [filter]
            id=Norfindil
        [/filter]

        flag=levelin
        with_bars=yes
    [/animate_unit]
    {SOUND magic-missile-1.ogg}
    [animate_unit]
        [filter]
            id=Norfindil
        [/filter]

        flag=levelout
        with_bars=yes
    [/animate_unit]
    {TRANSFORM_UNIT id=Norfindil $change_to}
    [animate_unit]
        [filter]
            id=Norfindil
        [/filter]

        flag=levelin
        with_bars=yes
    [/animate_unit]
    {MODIFY_UNIT id=Norfindil side {SIDE}}

    {MESSAGE_GALULDUR Norfindil "" "" _"What is happening to me???"}

    # Store away Norfindil for later, and capture village in case he is on one
    [store_unit]
        [filter]
            id=Norfindil
        [/filter]

        variable=stored_undead_Norfindil
    [/store_unit]

    {CAPTURE_FILTERED_VILLAGES_COPY {SIDE} x,y=$stored_undead_Norfindil.x,$stored_undead_Norfindil.y}

    [if]
        [variable]
            name=Norfindil_zapped
            equals=yes
        [/variable]

        [then]
            {MESSAGE_GALULDUR Undead_Leader "" "" _"Remember when you were 'zapped' in battle? The Master put a curse on you then. You have subconsciously been working for us since. That is why you insisted so vehemently on taking the southern route. And now I am controlling you. Now go and report to the Master."}
        [/then]

        [else]
            {MESSAGE_GALULDUR Undead_Leader "" "" _"Remember when you were exploring the High Plains by yourself? The Master put a curse on you then. You have subconsciously been working for us since. That is why you insisted so vehemently on taking the southern route. And now I am controlling you. Now go and report to the Master."}
        [/else]
    [/if]

    {CLEAR_VARIABLE change_from,change_to,Norfindil_level,Norfindil_zapped}

    {MOVE_UNIT_TO_EDGE_AND_OFF_MAP (id=Norfindil) {X} {Y} {FACING}}

    {MESSAGE_GALULDUR narrator "portraits/undead/{TRANSPARENT}/ancient-lich.png~O(50%)" "The Master" _"Harharharharhar!
<i> </i>
How's that for a little taste of my magic and what awaits those who dare to oppose me?"}

    # Have Vaddan take over and play out the rest of the turn on Side 2
    # Switch to his own side happens at the beginning of the next turn
    {MESSAGE_GALULDUR Vaddan "" "" _"Well, well, this is an interesting turn of events. I think I better take over now. Any objections?"}

    [store_unit]
        [filter]
            id=Vaddan
        [/filter]

        variable=tmp_Vaddan
        kill=yes
    [/store_unit]

    # Remove the loyal trait
    {CLEAR_VARIABLE tmp_Vaddan.modifications.trait[0]}
    # Also need to do the following for changes to take effect:
    {CLEAR_VARIABLE tmp_Vaddan.upkeep}

    [unstore_unit]
        variable=tmp_Vaddan
    [/unstore_unit]

    {CLEAR_VARIABLE tmp_Vaddan}

    [modify_unit]
        [filter]
            id=Vaddan
        [/filter]

        canrecruit=yes
        overlays=""
        ellipse=""
    [/modify_unit]

    [modify_side]
        side=2
        user_team_name=_"Vaddan"
    [/modify_side]
#enddef

#define SWITCH_VADDAN_SIDE
    # Switch Vaddan and all troops, gold, and villages from Norfindil's side to Vaddan's own side
    {MODIFY_UNIT side=2 side 1}  # Turn all units over to Vaddan's side

    [modify_side]
        side=2
        hidden=yes
        controller=null
    [/modify_side]

    [store_gold]
        side=2
        variable=tmp_gold
    [/store_gold]

    [modify_side]
        side=1
        hidden=no
        controller=human
        gold=$tmp_gold
    [/modify_side]

    {CLEAR_VARIABLE tmp_gold}

    {TRANSFER_VILLAGE_OWNERSHIP 2 1}
#enddef

#define S6_7_NEW_OBJECTIVES ADDITIONAL_BONUS_TEXT
    # New objectives, after Vaddan takes over; all but victory objective
    [objective]
        description= _"Bonus: Defeat the undead leader "+{ADDITIONAL_BONUS_TEXT}
        condition=win
    [/objective]
    [objective]
        description= _ "Death of Vaddan"
        condition=lose
    [/objective]
    {TURNS_RUN_OUT}
    [gold_carryover]
        bonus=yes
        carryover_percentage=40
    [/gold_carryover]
#enddef

#define SAIDENWAXL_STAFF FILTER
    [object]
        id=saidenwaxl_staff
        name=_"Saidenwaxl Staff"
        image=attacks/staff-magic.png
        duration=forever
        description= _ "Nobody knows who Saidenwaxl was and when or how he crafted this staff. Some people even think that Saidenwaxl is not a person, but a word in an ancient language, but everybody agrees that the staff is very old and extremely powerful. It gives its wielder magical attacks which do enormous damage. Its greatest power, however, is that an enemy unit killed by this staff is converted to the side of the user with half the hitpoints restored. After use, the staff's conversion energy requires a long time to recharge. It can therefore only be used for this purpose once per scenario. Use of 'ordinary' magical attacks is unlimited."

        [filter]
            {FILTER}
        [/filter]

        [effect]
            apply_to=new_attack
            name=Saidenwaxl Staff
            description=_"Saidenwaxl Staff"
            type=arcane
            range=ranged
            damage=12
            number=3
            icon=attacks/lightbeam.png
            [specials]
                {WEAPON_SPECIAL_MAGICAL}
            [/specials]
        [/effect]

        [effect]
            apply_to=new_animation
            [attack_anim]
                [filter_attack]
                    name=Saidenwaxl Staff
                [/filter_attack]
                {MISSILE_FRAME_LIGHT_BEAM}
                [if]
                    hits=no
                    [frame]
                        begin=-200
                        end=0
                        sound={SOUND_LIST:HOLY_MISS}
                    [/frame]
                [/if]
                [else]
                    hits=yes
                    [frame]
                        begin=-200
                        end=0
                        sound={SOUND_LIST:HOLY}
                    [/frame]
                [/else]
            [/attack_anim]
        [/effect]
    [/object]
#enddef

#define SHADOW_WAVE FILTER
    # Set up shadow wave for Norfindil
    [object]
        id=shadow_wave
        name=_"shadow wave"
        silent=yes
        duration=forever

        [filter]
            {FILTER}
        [/filter]

        [effect]
            apply_to=new_attack
            name=shadow wave
            description=_"shadow wave"
            type=arcane
            [specials]
                {WEAPON_SPECIAL_MAGICAL}
            [/specials]
            range=ranged
            damage=7
            number=4
            icon=attacks/dark-missile.png
        [/effect]

        [effect]
            apply_to=new_animation
            [attack_anim]
                [filter_attack]
                    name=shadow wave
                [/filter_attack]
                [missile_frame]
                    begin=-200
                    end=0
                    image="projectiles/darkmissile-n.png"
                    image_diagonal="projectiles/darkmissile-ne.png"
                [/missile_frame]
            [/attack_anim]
        [/effect]
    [/object]
#enddef

#define LEADER_GETS_STAFF_TRIGGER
    # Event: Get own leader the staff, when the undead leader dies
    # Programmed in two parts as next event is needed with different wrappers/triggers also
    [event]
        name=die
        first_time_only=no

        [fire_event]
            name=undead leader dies
            [primary_unit]
                id=$unit.id
            [/primary_unit]
            [secondary_unit]
                id=$second_unit.id
            [/secondary_unit]
        [/fire_event]
    [/event]
#enddef

#define LEADER_GETS_STAFF_EVENT
    [event]
        name=last breath

        [filter]
            id=Undead_Leader
        [/filter]

        {MESSAGE_GALULDUR Undead_Leader "" "" _"I failed the Master. His wrath will be terrible."}
    [/event]

    [event]
        name=undead leader dies

        [filter]
            id=Undead_Leader
        [/filter]

        # Figure out if the killing party is on either Vaddan's or Galuldur's side
        {VARIABLE leader_id enemy}

        [if]
            [have_unit]
                side=$second_unit.side
                id=Vaddan
            [/have_unit]

            [then]
                {VARIABLE leader_id Vaddan}
            [/then]
        [/if]

        [if]
            [have_unit]
                side=$second_unit.side
                id=Galuldur
            [/have_unit]

            [then]
                {VARIABLE leader_id Galuldur}
            [/then]
        [/if]

        # All of the following only happens if undead Leader was killed either by Vaddan's or Galuldur's side
        # and if this is the first time he was killed (could happen in S6/7 and S8)
        [if]
            [variable]
                name=leader_id
                not_equals=enemy
            [/variable]
            [variable]
                name=has_staff
                equals=nobody
            [/variable]

            [then]
                {MESSAGE_GALULDUR second_unit "" "" _"He dropped something. Some kind of staff."}

                # Different activities if it was leader himself who killed the Undead Leader
                [if]
                    [variable]
                        name=second_unit.id
                        not_equals=$leader_id
                    [/variable]

                    [then]
                        {MESSAGE_GALULDUR $leader_id "" "" _"Let me see that."}

                        # The following feels more complicated than it should be, including the creating of a second, temporary unit.
                        # This is necessary because the first unit does not get its experience upgraded if moved itself

                        # Move unit who killed Undead Leader next to own leader
                        {STORE_UNIT_VAR id=$leader_id x leader_x}
                        {STORE_UNIT_VAR id=$leader_id y leader_y}
                        {CLOSE_EMPTY_HEX $leader_x $leader_y Mm^Xm,Md^Xm,Wo 1}

                        # Store and hide original unit
                        [store_unit]
                            [filter]
                                id=$second_unit.id
                            [/filter]
                            variable=stored_unit
                        [/store_unit]
                        [hide_unit]
                            x,y=$second_unit.x,$second_unit.y
                        [/hide_unit]

                        # Move a fake unit and restore a duplicate
                        {FAKE_UNIT_MOVE $second_unit.x $hex_x $second_unit.y $hex_y 1 $second_unit.type ()}
                        {VARIABLE stored_unit.id tmp_unit}
                        {VARIABLE stored_unit.underlying_id tmp_unit}   # So that there is no duplication of this

                        [if]
                            [variable]
                                name=hex_x
                                less_than=$leader_x
                            [/variable]

                            [then]
                                {VARIABLE stored_unit.facing se}
                            [/then]

                            [else]
                                {VARIABLE stored_unit.facing sw}
                            [/else]
                        [/if]

                        [unstore_unit]
                            variable=stored_unit
                            x,y=$hex_x,$hex_y
                            find_vacant=yes
                        [/unstore_unit]

                        {MESSAGE_GALULDUR $leader_id "" "" _"Well, well, look what we have here. I have heard of this staff. I think I will hold on to it myself."}

                        # Now move fake back and restore original
                        [kill]
                            id=tmp_unit
                        [/kill]

                        {FAKE_UNIT_MOVE $hex_x $second_unit.x $hex_y $second_unit.y 1 $second_unit.type ()}

                        [unhide_unit]
                            x,y=$second_unit.x,$second_unit.y
                        [/unhide_unit]

                        {CLEAR_VARIABLE leader_x,leader_y,stored_unit,hex_x,hex_y}
                    [/then]

                    [else]
                        {MESSAGE_GALULDUR $leader_id "" "" _"Well, well, look what we have here. I have heard of this staff. I think I will hold on to it myself."}
                    [/else]
                [/if]

                # Now, apply the staff to whoever the leader of this side is and set the variable
                {SAIDENWAXL_STAFF id=$leader_id}
                {VARIABLE has_staff $leader_id}
            [/then]
        [/if]

        {CLEAR_VARIABLE leader_id}
    [/event]
#enddef

#define STAFF_USED_FIRST_TIME
    # Event: When the staff is used for the first time, have holder exclaim
    # Needs to be done twice, as it could be both on attack and defense
    [event]
        name=attacker hits

        [filter_attack]
            name=Saidenwaxl Staff
        [/filter_attack]

        [if]
            [variable]
                name=staff_used
                equals=no
            [/variable]

            [then]
                {MESSAGE_GALULDUR $unit.id "" "" _"Whoa, this thing is cool!"}
                {VARIABLE staff_used yes}
            [/then]
        [/if]
    [/event]

    [event]
        name=defender hits

        [filter_second_attack]
            name=Saidenwaxl Staff
        [/filter_second_attack]

        [if]
            [variable]
                name=staff_used
                equals=no
            [/variable]

            [then]
                {MESSAGE_GALULDUR $second_unit.id "" "" _"Whoa, this thing is cool!"}
                {VARIABLE staff_used yes}
            [/then]
        [/if]
    [/event]
#enddef

#define TRANSMUTATION_TRIGGER
    # Event: First unit killed per scenario by Saidenwaxl Staff converts to wielder's side and gets half its hitpoints restored
    #   Also, if that unit is in a village, the village will be captured
    #   Does not have movement or attacks left though for this turn
    # Additional actions if it is Norfindil who gets converted (in S10)
    #
    # Programmed in two parts as next event is needed with different wrappers also
    [event]
        name=last_breath
        first_time_only=no

        [fire_event]
            name=transmutation event
            [primary_unit]
                id=$unit.id
            [/primary_unit]
            [secondary_unit]
                id=$second_unit.id
            [/secondary_unit]
            [secondary_attack]
                name=$second_weapon.name
            [/secondary_attack]
        [/fire_event]
    [/event]
#enddef

#define TRANSMUTATION_EVENT
    [event]
        name=transmutation event

        [filter_second_attack]
            name=Saidenwaxl Staff
        [/filter_second_attack]

        {MODIFY_UNIT id=$unit.id side $second_unit.side}
        {VARIABLE hp $unit.max_hitpoints}
        {VARIABLE_OP hp divide 2}
        {VARIABLE_OP hp round 0}
        {MODIFY_UNIT id=$unit.id hitpoints $hp}
        {CLEAR_VARIABLE hp}
        {MODIFY_UNIT id=$unit.id moves 0}
        {MODIFY_UNIT id=$unit.id attacks_left 0}
        {MODIFY_UNIT id=$unit.id canrecruit no}
        {CAPTURE_FILTERED_VILLAGES_COPY $second_unit.side x,y=$unit.x,$unit.y}

        {SOUND magic-faeriefire.ogg}
        {FLOATING_TEXT_COPY id=$unit.id 255,0,0 "Woosh!!"}

        # Also, if the converted unit is the undead Norfindil, we turn him back into an elf
        [if]
            [variable]
                name=unit.id
                equals=Norfindil
            [/variable]

            [then]
                [if]
                    [variable]
                        name=Norfindil_level
                        equals=2
                    [/variable]

                    [then]
                        {VARIABLE change_from (Bone Shooter)}
                        {VARIABLE change_to (Elvish Ranger)}
                        {MODIFY_UNIT id=$unit.id hitpoints 21}
                    [/then]

                    [else]
                        {VARIABLE change_from (Banebow)}
                        {VARIABLE change_to (Elvish Avenger)}
                        {MODIFY_UNIT id=$unit.id hitpoints 27}
                    [/else]
                [/if]

                {SOUND magic-missile-1.ogg}
                {TRANSFORM_UNIT id=Norfindil $change_to}
                {SOUND magic-missile-1.ogg}
                {TRANSFORM_UNIT id=Norfindil $change_from}
                {SOUND magic-missile-1.ogg}
                {TRANSFORM_UNIT id=Norfindil $change_to}
                {SOUND magic-missile-1.ogg}
                {TRANSFORM_UNIT id=Norfindil $change_from}
                {SOUND magic-missile-1.ogg}
                {TRANSFORM_UNIT id=Norfindil $change_to}
                {SHADOW_WAVE id=Norfindil}

                # Remove the second trait (undead)
                [store_unit]
                    [filter]
                        id=Norfindil
                    [/filter]

                    variable=tmp_Norfindil
                    kill=yes
                [/store_unit]

                {CLEAR_VARIABLE tmp_Norfindil.modifications.trait[1]}

                [unstore_unit]
                    variable=tmp_Norfindil
                [/unstore_unit]

                {CLEAR_VARIABLE tmp_Norfindil,Norfindil_level,change_from,change_to}

                {MESSAGE_GALULDUR Norfindil "" "" _"Free, at last! It was horrible. I could see everything that was going on, but could not do anything about it."}
                {MESSAGE_GALULDUR Galur "" "" _"Welcome back, old friend."}
                {MESSAGE_GALULDUR Vaddan "" "" _"I would not have thought that I'd ever say that, but I am glad that you are back."}
                {MESSAGE_GALULDUR Norfindil "" "" _"Thanks, but let's not get all sentimental. We have work to do here. And something good came out of this after all. I figured out how the Master's shadow wave works. I am not quite as good with it as he is, but I got the hang of it for the most part."}

                # Also give the staff bearer the defense back
                {MODIFY_UNIT id=$has_staff attack[2].defense_weight 1.0}
                {NARRATOR_GRAY "" _"$has_staff will start using the staff for defense again now."}

                # Change objectives
                {VARIABLE Norfindil_objective _"Defeat"}
                [objectives]
                    summary=_"Eliminate The Threat to Pindir Forest"
                    [objective]
                        description= _"$Norfindil_objective the $main_enemy and all other enemy leaders."
                        condition=win
                    [/objective]
                    {S10_SECONDARY_OBJECTIVES}
                [/objectives]
            [/then]

            # or if it is not Norfindil, but in the last scenario, that means defeat
            [else]
                [if]
                    [variable]
                        name=scenario_number
                        equals=10
                    [/variable]

                    [then]
                        {MESSAGE_GALULDUR Galuldur "" "" _"No! That was not supposed to happen."}
                        # The next message will only show up if Galur has appeared already
                        {MESSAGE_GALULDUR Galur "" "" _"Now we cannot save Norfindil any more. Good bye old friend."}

                        [endlevel]
                            result=defeat
                        [/endlevel]
                    [/then]
                [/if]
            [/else]
        [/if]
    [/event]
#enddef

#define ORCS_MOVE_FAST SIDES
    # Event: Change all the enemy sides units to only need one movement point in the forest
    #   This is done at the beginning of each _side_ turn, in order to give new arrivals this ability
    #   Cannot use 'new turn', as we are playing two different sides in this scenario
    [event]
        name=side turn
        first_time_only=no

        {MODIFY_UNIT side={SIDES} movement_costs.forest 1}
    [/event]
#enddef

#define REDRAW_MOVE_DELAY DELAY_TIME SOUND_FILE
    # Redraw the terrain, move a unit away if on "deadly" terrain, play sound file (if desired), add a delay [ms] at the end
    # Also capture village in case the unit happens to move onto it

    # Move units on chasm, rubble and sand crater tiles out of the way
    [store_unit]
        [filter]
            [filter_location]
                terrain=Ql,*^Dr,Dd^Dc
            [/filter_location]
        [/filter]

        variable=tmp_units
    [/store_unit]

    {FOREACH tmp_units i_unit}
        {CLOSE_EMPTY_HEX $tmp_units[$i_unit].x $tmp_units[$i_unit].y (Ql,*^Dr,Dd^Dc) 1}
        {MOVE_UNIT id=$tmp_units[$i_unit].id $hex_x $hex_y}
        {CAPTURE_FILTERED_VILLAGES_COPY $tmp_units[$i_unit].side x,y=$hex_x,$hex_y}
    {NEXT i_unit}

    {CLEAR_VARIABLE tmp_units,hex_x,hex_y}

    [redraw]
    [/redraw]
    {SOUND ({SOUND_FILE})}
    {DELAY {DELAY_TIME}}
#enddef

#define UNDEAD_THROUGH_PORTAL X Y
    # X,Y: coordinates of portal hex

    # Things only happen if hex is not occupied by a Side 1 or 2 unit
    # and if probability is right
    {RANDOM 0..99}

    [if]
        [not]
            [have_unit]
                side=1,2
                x,y={X},{Y}
            [/have_unit]
        [/not]
        [variable]
            name=random
            less_than=$portal_probability
        [/variable]

        [then]
            {SCROLL_TO {X} {Y}}
            {DELAY 500}
            # Move away unit allied with undead
            [store_unit]
                [filter]
                    side=3,4,5,6,7,8
                    x,y={X},{Y}
                [/filter]

                variable=unit_on_portal
            [/store_unit]

            [if]
                [variable]
                    name=unit_on_portal.length
                    greater_than=0
                [/variable]

                [then]
                    {CLOSE_EMPTY_HEX {X} {Y} Ql 1}
                    {MOVE_UNIT id=$unit_on_portal.id $hex_x $hex_y}
                [/then]
            [/if]

            # Bring out new undead
            [set_variable]
                name=rand_type
                rand=$undead_types
            [/set_variable]

            [unit]
                side=6
                type=$rand_type
                facing=nw

                to_variable=tmp_unit
            [/unit]

            {PORTAL_IN 6 {X} {Y} $tmp_unit.image nw}

            [unstore_unit]
                x,y={X},{Y}
                variable=tmp_unit
            [/unstore_unit]

            {CLEAR_VARIABLE tmp_unit,hex_x,hex_y,unit_on_portal,rand_type}
        [/then]
    [/if]
    {CLEAR_VARIABLE random}
#enddef
