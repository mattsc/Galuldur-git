#textdomain wesnoth-Galuldur

#define MESSAGE_RIGHT ID TEXT
    # Message with image on the right
    {STORE_UNIT_VAR id={ID} profile message_profile}
    {MESSAGE {ID} "$message_profile~FL()~RIGHT()" "" {TEXT}}
    {CLEAR_VARIABLE message_profile}
#enddef

#define MESSAGE_FACING ID1 ID2 SPEAKER_ONLY TEXT
    # Message and turn units toward each other first
    # Only speaker turns if SPEAKER_ONLY is set to 'yes' (or anything but 'no' or an empty string)

    [adjust_facing]
        id={ID1}
        second_id={ID2}
        speaker_only={SPEAKER_ONLY}
    [/adjust_facing]

    {MESSAGE {ID1} "" "" {TEXT}}
#enddef

#define MESSAGE_FACING_RIGHT ID1 ID2 SPEAKER_ONLY TEXT
    # Message and turn units toward each other first, with image on right
    # Only speaker turns if SPEAKER_ONLY is set to 'yes' (or anything but 'no' or an empty string)

    [adjust_facing]
        id={ID1}
        second_id={ID2}
        speaker_only={SPEAKER_ONLY}
    [/adjust_facing]

    {MESSAGE_RIGHT {ID1} {TEXT}}
#enddef

#define GASP TEXT
    "<span color='#909090'><big>»</big> " + {TEXT} + " <big>«</big></span>"#enddef

#define NOTE TEXT
    "
<i> </i>
<i>[ Note: " + {TEXT} + " ]</i>"#enddef

#define NARRATOR_GRAY CAPTION TEXT
    # Name of the macro is a leftover from when the text style was using gray
    # color. Will keep the name for now as I am not sure yet whether I will
    # change my mind again.
    [message]
        speaker=narrator
        image=wesnoth-icon.png
        caption={CAPTION}
        #message="<span color='#909090'>" + {TEXT} + "</span>"
        message="<i>" + {TEXT} + "</i>" # wmllint: ignore
    [/message]
#enddef

#define NEW_LEADER_APPEARS SIDE TYPE X Y ID WML
    # Creates the new leader,
    # Starts ai control for the side and unhides it
    # WML: can be used to set additional unit properties, e.g. set a name
    [unit]
        side={SIDE}
        id={ID}
        type={TYPE}
        x,y={X},{Y}
        canrecruit=yes
        {WML}
    [/unit]

    [modify_side]
        side={SIDE}
        hidden=no
        controller=ai
    [/modify_side]
#enddef

#define NEW_WOLF SIDE WOLF_MAX X Y
    # Event: New wolf for side {SIDE} at beginning of each turn at {X},{Y} if there are less than {WOLF_MAX}
    [event]
        name=new turn
        first_time_only=no

        {VARIABLE tmp {WOLF_MAX}}
        {VARIABLE_OP tmp add -1}

        [if]
            [have_unit]
                side={SIDE}
                type=Wolf
                count=0-$tmp
            [/have_unit]

            [then]
                {GENERIC_UNIT {SIDE} Wolf {X} {Y}}
            [/then]
        [/if]

        {CLEAR_VARIABLE tmp}
    [/event]
#enddef

#define RANDOM_FOES_EVENT SIDE PROBABILITY X_RANGE Y_RANGE
    # Event: At the beginning of the turn, there's a chance of Random Foes unit to appear in the X_RANGE, Y_RANGE area
    #   Closest unoccupied and passable hex will be found
    [event]
        name=new turn
        first_time_only=no

        {RANDOM 0..99}

        [if]
            [variable]
                name=random
                less_than={PROBABILITY}
            [/variable]

            [then]
                [set_variable]
                    name=rand_type
                    rand="Troll,Troll Whelp,Wolf,Wolf Rider,Goblin Knight,Young Ogre,Ogre,Footpad,Thug,Thief,Poacher,Goblin Impaler,Goblin Rouser"
                [/set_variable]
                [set_variable]
                    name=rand_x
                    rand={X_RANGE}
                [/set_variable]
                [set_variable]
                    name=rand_y
                    rand={Y_RANGE}
                [/set_variable]

                # Now make sure that this position is unoccupied and passable
                #   (which will offset the position by one, but since it is random anyway, who cares)
                {CLOSE_EMPTY_HEX $rand_x $rand_y *^Xm,Wo 1}
                {GENERIC_UNIT {SIDE} $rand_type $hex_x $hex_y}
                {CAPTURE_FILTERED_VILLAGES_COPY {SIDE} x,y=$hex_x,$hex_y}

                {CLEAR_VARIABLE rand_x,rand_y,rand_type,hex_x,hex_y}
            [/then]
        [/if]

        {CLEAR_VARIABLE random}
    [/event]
#enddef

#define PASS_OF_HANGARN X Y
    [event]
        name=moveto
        first_time_only=no
        [allow_undo]
        [/allow_undo]

        [filter]
            side=1
            x,y={X},{Y}
        [/filter]

        {MESSAGE narrator (scenery/signpost.png) "" _"Pass of Hangarn"}
    [/event]
#enddef

#define BIG_TREE X Y
    [event]
        name=moveto
        [allow_undo]
        [/allow_undo]

        [filter]
            side=1
            x,y={X},{Y}
        [/filter]

        {MESSAGE unit "" "" _"How can such a big tree survive up here?"}
    [/event]
#enddef

#define ADLEWYS_PASSAGE X Y
    [event]
        name=moveto
        first_time_only=no
        [allow_undo]
        [/allow_undo]

        [filter]
            side=1
            x,y={X},{Y}
        [/filter]

        {MESSAGE narrator (scenery/signpost.png) "" _"Adlewys Passage"}
    [/event]
#enddef

#define PLEASANT_PASSAGE X Y
    [event]
        name=moveto
        first_time_only=no
        [allow_undo]
        [/allow_undo]

        [filter]
            [filter_side]
                controller=human
            [/filter_side]
            x,y={X},{Y}
        [/filter]

        {MESSAGE narrator (scenery/signpost.png) "" _"Pleasant Passage
<i> </i>
(Never mind the smell)"}
    [/event]
#enddef

#define CLOSE_EMPTY_HEX X Y NOT_TERRAIN STARTING_RADIUS
    # Get the coordinates of an unoccupied hex within STARTING_RADIUS of the input coordinates
    # that is not of terrain type NOT_TERRAIN
    # INPUT: X Y : the coordinates of the hex around which to look
    #        NOT_TERRAIN: the type of terrain that the hex should NOT have
    #        STARTING_RADIUS: at what radius from the center hex we start; this is increased one by one until an empty hex is found
    # Output: hex_x hex_y: return variable of new coordinates

    # This first part is so that () or "" are possible for NOT_TERRAIN
    # even when passed through several macros with random use of "" and ()
    [set_variable]
        name=CEH_terrain
        value={NOT_TERRAIN}
    [/set_variable]
    {IF_VAR CEH_terrain equals "" (
        [then]
            {VARIABLE CEH_terrain XXX}
        [/then]
    )}

    [store_map_dimensions]
        variable=CEH_map_size
    [/store_map_dimensions]

    {VARIABLE r_CEH {STARTING_RADIUS}}
    [while]
        {VARIABLE_CONDITIONAL r_CEH less_than 99}

        [do]
            [store_locations]
                x=1-$CEH_map_size.width
                y=1-$CEH_map_size.height
                [and]  # within radius
                    x,y={X},{Y}
                    radius=$r_CEH
                [/and]
                [not]  # unoccupied
                    [filter]
                    [/filter]
                [/not]
                [not]  # not of the given type of terrain
                    terrain=$CEH_terrain
                [/not]
                variable=CEH_coords
            [/store_locations]
            {IF_VAR CEH_coords.length greater_than 0 (
                [then]  # if something was found, break the loop
                    #{FOREACH CEH_coords i_CEH}
                    #{DEBUG ($r_CEH $i_CEH $CEH_coords.length $CEH_coords[$i_CEH].x $CEH_coords[$i_CEH].y $CEH_coords[$i_CEH].terrain)}
                    #{NEXT i_CEH}
                    {VARIABLE r_CEH 99}
                [/then]
                [else]  # otherwise increase the search radius
                    {VARIABLE_OP r_CEH add 1}
                    #{DEBUG "$r_CEH $CEH_terrain"}
                [/else]
            )}
        [/do]
    [/while]
    {CLEAR_VARIABLE r_CEH,CEH_terrain,CEH_map_size}

    # Now pick one of those hexes randomly
    {VARIABLE i_hex_CEH $CEH_coords.length}
    {VARIABLE_OP i_hex_CEH add -1}
    [set_variable]
        name=CEH_random_hex
        rand=0..$i_hex_CEH
    [/set_variable]
    {VARIABLE hex_x $CEH_coords[$CEH_random_hex].x}
    {VARIABLE hex_y $CEH_coords[$CEH_random_hex].y}
    #{DEBUG (Result: $hex_x $hex_y [$CEH_random_hex/$CEH_coords.length])}
    {CLEAR_VARIABLE CEH_coords,i_hex_CEH,CEH_random_hex}
#enddef

#define FAR_EMPTY_HEX X Y NOT_TERRAIN STARTING_RADIUS
    # This is almost the same as CLOSE_EMPTY_HEX, except that it return coordinates for
    # a location that is _exactly_ as far away as STARTING_RADIUS (or farther, if none available)
    # Get the coordinates of an unoccupied, hex a given radius away from the input coordinates
    # that is not of terrain type NOT_TERRAIN
    # INPUT: X Y : the coordinates of the hex around which to look
    #        NOT_TERRAIN: the type of terrain that the hex should NOT have
    #        STARTING_RADIUS: at what radius from the center hex we start; this is increased one by one until an empty hex is found
    # Output: hex_x hex_y: return variable of new coordinates

    # This first part is so that () or "" are possible for NOT_TERRAIN
    # even when passed through several macros with random use of "" and ()
    [set_variable]
        name=FEH_terrain
        value={NOT_TERRAIN}
    [/set_variable]
    {IF_VAR FEH_terrain equals "" (
        [then]
            {VARIABLE FEH_terrain XXX}
        [/then]
    )}

    [store_map_dimensions]
        variable=FEH_map_size
    [/store_map_dimensions]

    {VARIABLE r_FEH {STARTING_RADIUS}}
    [while]
        {VARIABLE_CONDITIONAL r_FEH less_than 99}

        [do]
            {VARIABLE r_minus_1_FEH $r_FEH}
            {VARIABLE_OP r_minus_1_FEH add -1}
            [store_locations]
                x=1-$FEH_map_size.width
                y=1-$FEH_map_size.height
                [and]  # within radius
                    x,y={X},{Y}
                    radius=$r_FEH
                [/and]
                [not]  # not within radius
                    x,y={X},{Y}
                    radius=$r_minus_1_FEH
                [/not]
                [not]  # unoccupied
                    [filter]
                    [/filter]
                [/not]
                [not]  # not of the given type of terrain
                    terrain=$FEH_terrain
                [/not]
                variable=FEH_coords
            [/store_locations]
            {IF_VAR FEH_coords.length greater_than 0 (
                [then]  # if something was found, break the loop
                    #{FOREACH FEH_coords i_FEH}
                    #{DEBUG ($r_FEH $i_FEH $FEH_coords.length $FEH_coords[$i_FEH].x $FEH_coords[$i_FEH].y $FEH_coords[$i_FEH].terrain)}
                    #{NEXT i_FEH}
                    {VARIABLE r_FEH 99}
                [/then]
                [else]  # otherwise increase the search radius
                    {VARIABLE_OP r_FEH add 1}
                    #{DEBUG "$r_FEH $FEH_terrain"}
                [/else]
            )}
        [/do]
    [/while]
    {CLEAR_VARIABLE r_FEH,r_minus_1_FEH,FEH_terrain,FEH_map_size}

    # Now pick one of those hexes randomly
    {VARIABLE i_hex_FEH $FEH_coords.length}
    {VARIABLE_OP i_hex_FEH add -1}
    [set_variable]
        name=FEH_random_hex
        rand=0..$i_hex_FEH
    [/set_variable]
    {VARIABLE hex_x $FEH_coords[$FEH_random_hex].x}
    {VARIABLE hex_y $FEH_coords[$FEH_random_hex].y}
    #{DEBUG (Result: $hex_x $hex_y [$FEH_random_hex/$FEH_coords.length])}
    {CLEAR_VARIABLE FEH_coords,i_hex_FEH,FEH_random_hex}
#enddef

#define NORFINDIL_TROOPS NORFINDIL_X NORFINDIL_Y VADDAN_X VADDAN_Y
    # @NORFINDIL_X,@NORFINDIL_Y: Starting position for Norfindil
    # @VADDAN_X,@VADDAN_Y: Starting position for Vaddan

    # Set up the side
    [modify_side]
        side=2
        controller=human
        hidden=no
    [/modify_side]

    # Bring out Norfindil's troops
    {FOREACH Norfindil_troops i}
        # Switch to Side 2
        {VARIABLE Norfindil_troops[$i].side 2}

        # Put them into the right location
        [switch]
            variable=Norfindil_troops[$i].id

            [case]
                value=Norfindil
                {VARIABLE Norfindil_troops[$i].x {NORFINDIL_X}}
                {VARIABLE Norfindil_troops[$i].y {NORFINDIL_Y}}
            [/case]

            [case]
                value=Vaddan
                {VARIABLE Norfindil_troops[$i].x {VADDAN_X}}
                {VARIABLE Norfindil_troops[$i].y {VADDAN_Y}}
            [/case]

            [else]
                {VARIABLE Norfindil_troops[$i].x recall}
                {VARIABLE Norfindil_troops[$i].y recall}
            [/else]
        [/switch]

        [unstore_unit]
            variable=Norfindil_troops[$i]
            find_vacant=yes
        [/unstore_unit]
    {NEXT i}

    {CLEAR_VARIABLE Norfindil_troops}

    # Make Norfindil the leader for this part
    [store_unit]
        [filter]
            id=Norfindil
        [/filter]

        variable=tmp_Norfindil
        kill=yes
    [/store_unit]

    # Remove the second trait
    {CLEAR_VARIABLE tmp_Norfindil.modifications.trait[1]}
    # Also need to do the following for changes to take effect:
    {CLEAR_VARIABLE tmp_Norfindil.upkeep}

    [unstore_unit]
        variable=tmp_Norfindil
    [/unstore_unit]

    {CLEAR_VARIABLE tmp_Norfindil}

    [modify_unit]
        [filter]
            id=Norfindil
        [/filter]

        canrecruit=yes
        overlays=""
        ellipse=""
        [modifications]
            {TRAIT_QUICK}
        [/modifications]
    [/modify_unit]
#enddef

#define NORFINDIL_FACES_VADDAN
    [event]
        name=moveto
        first_time_only=no
        [allow_undo]
        [/allow_undo]

        [filter]
            id=Norfindil,Vaddan
        [/filter]

        [if]
            [have_unit]
                id=Norfindil
            [/have_unit]
            [have_unit]
                id=Vaddan
            [/have_unit]

            [then]
                [adjust_facing]
                    id=Norfindil
                    second_id=Vaddan
                    speaker_only=yes
                [/adjust_facing]
            [/then]
        [/if]
    [/event]
#enddef

#define NEW_REST_NO_DELAY X Y
    # Make a new rest mark on a tracking map, without a blinking animation or delay.
    [image]
        x,y={X},{Y}
        file=misc/flag-red.png
        centered=yes
    [/image]
#enddef

#define OLD_JOURNEY_YELLOW X Y
    # Make an old journey mark on a tracking map
    [image]
        x,y={X},{Y}
        file=dot-yellow.png
        centered=yes
    [/image]
#enddef

#define OLD_BATTLE_YELLOW X Y
    # Make an old battle mark on a tracking map
    [image]
        x,y={X},{Y}
        file=cross-yellow.png
        centered=yes
    [/image]
#enddef

#define OLD_REST_YELLOW X Y
    # Make an old rest mark on a tracking map
    [image]
        x,y={X},{Y}
        file=flag-yellow.png
        centered=yes
    [/image]
#enddef

#define SOUND SOUND_FILE
    [sound]
        name={SOUND_FILE}
    [/sound]
#enddef

#define DELAY DELAY_TIME
    [delay]
        time={DELAY_TIME}
    [/delay]
#enddef

#define MENU_ELRALITH_CONTROL SIDE
    # Menu items for making Elralith go to a certain location
    # SIDE: the side Eralith is on

    # Set up menu item for making Elralith go somewhere
    {VARIABLE Elralith_goal_set no}

    [store_map_dimensions]  # This might already be stored in the scenario, but that does not matter
        variable=map_dims
    [/store_map_dimensions]

    [set_menu_item]
        id=move_Elralith
        description=_"Make Elralith go here"

        # Only when clicked on a location (excluding the edge of the map)
        [show_if]
            [variable]
                name=x1
                greater_than=0
            [/variable]
            [and]
                [variable]
                    name=x1
                    less_than_equal_to=$map_dims.width
                [/variable]
            [/and]
            [and]
                [variable]
                    name=y1
                    greater_than=0
                [/variable]
            [/and]
            [and]
                [variable]
                    name=y1
                    less_than_equal_to=$map_dims.height
                [/variable]
            [/and]
            [and]
                [variable]
                    name=Elralith_goal_set
                    equals=no
                [/variable]
            [/and]
        [/show_if]

        [command]
            {VARIABLE Elralith_goal_set yes}

            [modify_side]
                side={SIDE}
                [ai]
                    [leader_goal]
                        x,y=$x1,$y1
                    [/leader_goal]
                [/ai]
            [/modify_side]
        [/command]
    [/set_menu_item]

    # Set up second menu item to clear the goal for Elralith
    [set_menu_item]
        id=dont_move_Elralith
        description=_"Let Elralith go wherever he wants"

        [show_if]
            [variable]
                name=Elralith_goal_set
                equals=yes
            [/variable]
        [/show_if]

        [command]
            {VARIABLE Elralith_goal_set no}

            [modify_side]
                side={SIDE}
                [ai]
                    [leader_goal]  # Clear the goal
                    [/leader_goal]
                [/ai]
            [/modify_side]
        [/command]
    [/set_menu_item]
#enddef

#define CLEAR_ELRALITH_MENU
    # This is a separate event, which is triggered at victory
    [event]
        name=victory

        # Disable the menu items used in this scenario
        [set_menu_item]
            id=move_Elralith
            [show_if]
                [not]
                [/not]
            [/show_if]
        [/set_menu_item]

        [set_menu_item]
            id=dont_move_Elralith
            [show_if]
                [not]
                [/not]
            [/show_if]
        [/set_menu_item]

        {CLEAR_VARIABLE Elralith_goal_set,map_dims}
    [/event]
#enddef

#define CLEAR_FOG_FIXED SIDE X Y RADIUS
    # Same as in standard macros, but with a bug fixed that did not work when
    # there was more than one fog clearer
    # Clears fog in a specific area for the given side. This is to be used only
    # for the duration of an event: always use {UNCLEAR_FOG} (below) before the
    # event exits, or otherwise you'll be left with fake fog clearer units on
    # the map.
    [if]
        [have_unit]
            type=Fog Clearer
        [/have_unit]

        [then]
            [set_variable]
                name=fog_clearer_i
                add=1
            [/set_variable]
        [/then]

        [else]
            [set_variable]
                name=fog_clearer_i
                value=1
            [/set_variable]
        [/else]
    [/if]

    [unit]
        side={SIDE}
        type=Fog Clearer
        id=fog_clearer_$fog_clearer_i
        x,y={X},{Y}
        max_moves={RADIUS}
    [/unit]

    [store_unit]
        [filter]
            id=fog_clearer_$fog_clearer_i
        [/filter]

        kill=no
        variable=new_fog_clearer
    [/store_unit]

    [hide_unit]
        x,y=$new_fog_clearer.x,$new_fog_clearer.y
    [/hide_unit]

    [redraw]
        side={SIDE}
    [/redraw]

    [clear_variable]
        name=new_fog_clearer
    [/clear_variable]
#enddef

#define UNCLEAR_FOG_FIXED
    # Same as in standard macros, but with a bug fixed that did not work when
    # there was more than one fog clearer
    # Restores fog that was temporarily cleared (check CLEAR_FOG above). Only
    # one UNCLEAR_FOG is required no matter how many times CLEAR_FOG was used.
    [kill]
        type=Fog Clearer
        animate=no
        fire_event=no
    [/kill]

    [clear_variable]
        name=fog_clearer_i
    [/clear_variable]
#enddef

#define S10_SECONDARY_OBJECTIVES
    [objective]
        description= _ "Death of Galuldur"
        condition=lose
    [/objective]
    [objective]
        description= _ "Death of Vaddan"
        condition=lose
    [/objective]
    [objective]
        [show_if]
            [have_unit]
                id=Galur
            [/have_unit]
        [/show_if]
        description= _ "Death of Galur"
        condition=lose
    [/objective]
    [objective]
        [show_if]
            [have_unit]
                id=Galur    # No typo!!! We know this after Galur appeared, not Norfindil
            [/have_unit]
        [/show_if]
        description= _ "Death of Norfindil"
        condition=lose
    [/objective]
    [objective]
        [show_if]
            [have_unit]
                id=Elralith
            [/have_unit]
        [/show_if]
        description= _ "Death of Elralith"
        condition=lose
    [/objective]
    [objective]
        [show_if]
            [variable]
                name=messenger_appeared
                equals=yes
            [/variable]
        [/show_if]
        description= _ "Enemy unit is converted with Saidenwaxl Staff"
        condition=lose
    [/objective]
    [objective]
        [show_if]
            [have_unit]
                id=Galur
            [/have_unit]
            [not]
                [have_unit]
                    id=Norfindil
                    side=1
                [/have_unit]
            [/not]
        [/show_if]
        description= _ "Unit other than Norfindil is converted with Saidenwaxl Staff"
        condition=lose
    [/objective]
    {IS_LAST_SCENARIO}
#enddef

#define GALURS_MESSENGER_OBJECTIVES
    [objectives]
        [objective]
            description= _"Figure out what happened. Defeat all enemy leaders as you go along."
            condition=win
        [/objective]
        {S10_SECONDARY_OBJECTIVES}
    [/objectives]
#enddef

#define FIND_OPPOSITE_HEX X_CENTER Y_CENTER X Y
    # X_CENTER,Y_CENTER: position of the center of the 7 hexes
    # X,Y: position of hex for which the opposite side w.r.t X_CENTER,Y_CENTER is to be found
    # Output: opp_x opp_y: return variable of new coordinates

    # Finding the opposite x position is easy, simply add (X_CENTER-X) to X_CENTER
    {VARIABLE opp_x {X_CENTER}}
    {VARIABLE_OP opp_x sub {X}}  # This is dx=X_CENTER-X
    {VARIABLE_OP opp_x add {X_CENTER}}
    #{DEBUG ({X_CENTER} $opp_x)}

    # y is slightly more tricky, because of the hexagonal shape, but there's a neat trick
    #   that saves us from having to build in a lot of if statements
    # Among the adjacent hexes, it is the one with the correct x, and y _different_ from Y
    [store_locations]
        [filter_adjacent_location]
            x,y={X_CENTER},{Y_CENTER}
        [/filter_adjacent_location]
        [and]
            x=$opp_x
        [/and]
        [not]
            y={Y}
        [/not]
        variable=FOH_coords
    [/store_locations]
    #{DEBUG ($FOH_coords.length)}

    {VARIABLE opp_y $FOH_coords[0].y}
    #{DEBUG ($opp_x $opp_y)}

    {CLEAR_VARIABLE FOH_coords}
#enddef

# ----------------------------------------------
# The following are macros that will be deprecated in 1.9.4
# This is the lazy way to get around that, they are simply copies of the 1.8 macros

#define FLOATING_TEXT_COPY FILTER COLOUR_VALUE TEXT
    # Floats the given text above the given unit in the same manner as
    # damage numbers are displayed in combat. For example when a unit
    # steps on a hidden trap and is dealt 8 damage, let's show this to
    # the player like all other damage is:
    #! {FLOATING_TEXT_COPY x,y=$x1,$y1 255,0,0 "8"}
    [store_unit]
        [filter]
            {FILTER}
        [/filter]

        kill=no
        variable=FLOATING_TEXT_temp
    [/store_unit]

    [unstore_unit]
        variable=FLOATING_TEXT_temp
        find_vacant=no
        red,green,blue={COLOUR_VALUE}
        text={TEXT}
    [/unstore_unit]

    {CLEAR_VARIABLE FLOATING_TEXT_temp}
#enddef

#define CAPTURE_FILTERED_VILLAGES_COPY SIDE FILTER
    # Change ownership of villages matching the specified location filter.
    [store_locations]
        {FILTER}
        variable=temp_target_villages
    [/store_locations]

    {FOREACH temp_target_villages i}
        [capture_village]
            side={SIDE}
            x,y=$temp_target_villages[$i].x,$temp_target_villages[$i].y
        [/capture_village]
    {NEXT i}

    {CLEAR_VARIABLE temp_target_villages}
#enddef

#define REPLACE_SCHEDULE ADD_TURNS
    # Replace the schedule by one starting at the time that is stored in
    # variable 'time_of_day' - which has to be stored before calling this
    # macro (e.g. at the end of the previous scenario).
    # @ADD_TURNS: number of turns to add to the ToD saved before

    [switch]
        variable=time_of_day.id

        [case]
            value=dawn

            {VARIABLE tmp_time 0}
        [/case]

        [case]
            value=morning

            {VARIABLE tmp_time 1}
        [/case]

        [case]
            value=afternoon

            {VARIABLE tmp_time 2}
        [/case]

        [case]
            value=dusk

            {VARIABLE tmp_time 3}
        [/case]

        [case]
            value=first_watch

            {VARIABLE tmp_time 4}
        [/case]

        [else]
            {VARIABLE tmp_time 5}
        [/else]
    [/switch]
    #{DEBUG "Replacing schedule at current_time=$tmp_time ($time_of_day.id)"}

    [set_variable]
        name=tmp_time
        add={ADD_TURNS}
    [/set_variable]
    [set_variable]
        name=tmp_time
        modulo=6
    [/set_variable]
    #{DEBUG "And add {ADD_TURNS} turns (modulo 6): $tmp_time"}

    [replace_schedule]
        {DEFAULT_SCHEDULE}
        current_time=$tmp_time
    [/replace_schedule]

    {CLEAR_VARIABLE tmp_time,time_of_day}
#enddef
