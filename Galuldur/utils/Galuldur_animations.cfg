#textdomain wesnoth-Galuldur

############################################################################
# The EXTRA_ANIM_* macros are for playing new animations for units or on   #
# hexes using the [extra_anim] tags. Empty hexes are dealt with by putting #
# an invisible unit there.                                                 #
############################################################################
# This is a subset of those used in Grnk

#define EXTRA_ANIM_UNIT_NO_STORE ID ANIM_WML
    # Play animation for a unit; it is assumed that the unit is already
    # stored in a variable when this macro is called. Reasons might be to avoid
    # overhead if the unit is already stored, or because storing is unnecessary
    # because it will be killed at the end anyway.
    # @ID: id of the unit
    # @ANIM_WML: WML code to go into the [extra_anim] tag, excl. the flag

    [object]
        silent=yes

        [filter]
            id={ID}
        [/filter]

        [effect]
            apply_to=new_animation

            [extra_anim]
                flag=EAU_animation
                {ANIM_WML}
            [/extra_anim]
        [/effect]
    [/object]

    [animate_unit]
        [filter]
            id={ID}
        [/filter]

        flag=EAU_animation
    [/animate_unit]
#enddef

#define EXTRA_ANIM_UNIT ID ANIM_WML
    # Play animation for a unit. Unlike EXTRA_ANIM_UNIT_NO_STORE, this stores
    # the unit into variable EA_unit first and unstores is afterward to
    # remove the animation from the unit again.
    # @ID: id of the unit
    # @ANIM_WML: WML code to go into the [extra_anim] tag, excl. the flag

    [store_unit]
        [filter]
            id={ID}
        [/filter]

        variable=EAU_unit
    [/store_unit]

    {EXTRA_ANIM_UNIT_NO_STORE {ID} {ANIM_WML}}

    [unstore_unit]
        variable=EAU_unit
    [/unstore_unit]

    {CLEAR_VARIABLE EAU_unit}
#enddef

#define EXTRA_ANIM_HEX X Y FACING ANIM_WML
    # Play an animation on a hex. If a unit is already on the hex, macro
    # EXTRA_ANIM_UNIT_NO_STORE is used, otherwise an invisible unit
    # is temporarily placed there.
    # @x,@Y: coordinates of the hex
    # @FACING: facing of the unit; only relevant if the animation includes offsets
    # @ANIM_WML: WML code to go into the [extra_anim] tag, excl. the flag

    [store_unit]
        [filter]
            x,y={X},{Y}
        [/filter]

        variable=EAH_unit
    [/store_unit]

    [if]
        [variable]
            name=EAH_unit.length
            equals=0
        [/variable]

        [then]
            # If hex is empty, place an invisible unit there
            # Is set to be an enemy of all human controlled sides, or Side 1 if
            # no such side exists. In the later case, the ally-orb will show
            # up briefly at the beginning of the animation

            [store_side]
                [enemy_of]
                    controller=human
                [/enemy_of]

                variable=EAH_sides
            [/store_side]

            [if]
                [variable]
                    name=EAH_sides.length
                    equals=0
                [/variable]

                [then]
                    {VARIABLE EAH_side 1}
                [/then]

                [else]
                    {VARIABLE EAH_side $EAH_sides[0].side}
                [/else]
            [/if]

            [unit]
                id=EAH_unit_id
                type=Invisible Unit

                x,y={X},{Y}
                side=$EAH_side
                facing={FACING}

                [modifications]
                    [object]
                        [effect]
                            apply_to=new_animation

                            [extra_anim]
                                flag=EAH_animation
                                {ANIM_WML}
                            [/extra_anim]
                        [/effect]
                    [/object]
                [/modifications]
            [/unit]

            {CLEAR_VARIABLE EAH_sides,EAH_side}

            # Now make the unit visible (so that the animation can be seen)
            # Cannot use [role] here because it does not change the display right away
            [modify_unit]
                [filter]
                    id=EAH_unit_id
                [/filter]

                role=IU_visible
            [/modify_unit]

            [animate_unit]
                [filter]
                    id=EAH_unit_id
                [/filter]

                flag=EAH_animation
            [/animate_unit]

            [kill]
                id=EAH_unit_id
            [/kill]
        [/then]

        [else]
            {EXTRA_ANIM_UNIT_NO_STORE $EAH_unit.id {ANIM_WML}}

            [unstore_unit]
                variable=EAH_unit
            [/unstore_unit]

            {CLEAR_VARIABLE EAH_unit}
        [/else]
    [/if]
#enddef

#define BURN_FOREST LOCATION_FILTER
    # Replace forest by burnt forest tiles
    # Note: a redraw might be required afterward

    # Forest on flats
    [store_locations]
        terrain=Gs^F*,Gg^F*
        [and]
            {LOCATION_FILTER}
        [/and]

        variable=forest_flats
    [/store_locations]

    {FOREACH forest_flats i}
        {MODIFY_TERRAIN Gs^Fdw $forest_flats[$i].x $forest_flats[$i].y}
    {NEXT i}

    {CLEAR_VARIABLE forest_flats}

    # Forest on hills
    [store_locations]
        terrain=Hh^F*
        [and]
            {LOCATION_FILTER}
        [/and]
        variable=forest_hills
    [/store_locations]

    {FOREACH forest_hills i}
        {MODIFY_TERRAIN Hh^Fdw $forest_hills[$i].x $forest_hills[$i].y}
    {NEXT i}

    {CLEAR_VARIABLE forest_hills}
#enddef

#define BURN_ON_MOVE_S8_10 SIDES
    # Event: trees get burned as enemy units move - Scenarios 8 & 10
    #   This does not do all the same as in Scen 4 (there is no limit, and no defeat event)
    [event]
        name=moveto
        first_time_only=no

        [filter]
            side={SIDES}
        [/filter]

        {BURN_FOREST (
            x,y=$x1,$y1
            radius=1
        )}
    [/event]
#enddef

#define PLACE_AND_REMOVE_ITEM HALO X Y DELAY_TIME
    [item]
        x,y={X},{Y}
        halo={HALO}
    [/item]
    {DELAY {DELAY_TIME}}
    [remove_item]
        x,y={X},{Y}
    [/remove_item]
#enddef

#define FIREBALL_IN SIDE X Y IMAGE FACING IPF
    # Play fading-in animation for a unit together with a fireball
    # @SIDE: side of the unit to fade in (for team coloring)
    # @X,@Y: the location where
    # @IMAGE: the image to use for the animation
    # @FACING: the direction in which the unit should be facing
    # @IPF: image path function

    {EXTRA_ANIM_HEX {X} {Y} {FACING} (
        alpha=0~0.5:700,0.5~1:300
        [frame]
            image="{IMAGE}~TC({SIDE},magenta):1000"
            halo=projectiles/fireball-impact-[1~16].png{IPF}:60
            halo_y=-24
            sound=fire.wav
        [/frame]
    )}
#enddef

#define FIREBALL_KILL ID
    # Kill a unit with a fireball and blackening animation
    # @ID: the id of the unit

    {EXTRA_ANIM_UNIT {ID} (
        blend_color=0,0,0
        blend_ratio=0~1:600,1:400
        alpha=1:600,1~-0.5:400
        [frame]
            image=$EAU_unit.image:1000
            halo=projectiles/fireball-impact-[1~16].png:60
            halo_y=-12
            sound=fire.wav
        [/frame]
    )}

    [kill]
        id={ID}
        fire_event=yes
    [/kill]
#enddef

#define TELEPORT_ANIM_OUT ID IPF
    # Play a teleport-away animation on a unit
    # Kill the unit at the end.

    {EXTRA_ANIM_UNIT {ID} (
        [frame]
            halo="halo/teleport-[9~1].png{IPF}:150"
            sound=entangle.wav
        [/frame]
    )}

    [kill]
        id={ID}
    [/kill]
#enddef

#define TELEPORT_ANIM_IN X Y IPF
    # Play a teleport-in animation on a hex

    {EXTRA_ANIM_HEX {X} {Y} se (
        [frame]
            halo="halo/teleport-[1~9].png{IPF}:150"
            sound=entangle.wav
        [/frame]
    )}
#enddef

#define TELEPORT_AWAY ID X_ORG Y_ORG DISTANCE
    # Teleport a unit a given distance away from a certain location (not necessarily its own position)
    # Note: this macro does something slightly different from that in Grnk

    # Actions at the old location
    [store_unit]
        [filter]
            id={ID}
        [/filter]
        variable=teleported_unit
        animate=yes
    [/store_unit]
    {SOUND entangle.wav}
    {TELEPORT_ANIM_OUT {ID} ()}

    # Find the new location, DISTANCE away from X_ORG,Y_ORG
    {FAR_EMPTY_HEX {X_ORG} {Y_ORG} (Ql,Wo) {DISTANCE}}

    # Unstore at the new location
    {TELEPORT_ANIM_IN $hex_x $hex_y ()}
    [unstore_unit]
        variable=teleported_unit
        x,y=$hex_x,$hex_y
        animate=yes
    [/unstore_unit]

    # Capture village, in case unit ends up on one
    {CAPTURE_FILTERED_VILLAGES_COPY $teleported_unit.side x,y=$hex_x,$hex_y}

    {CLEAR_VARIABLE teleported_unit,hex_x,hex_y}
#enddef

#########################################
# Moving units over the map edge macros #
#########################################

# This is a subset of those in Grnk , with minor modifications (such as ID -> FILTER)

#define MOVE_UNIT_ONTO_MAP SIDE TYPE X Y FACING UNIT_WML
    # Animate a unit onto the map from beyond the edge
    #
    # Unit parameters which always need to be given:
    #  @SIDE: side of unit; needs to be an enemy side for the player, otherwise
    #    the ellipse will blip in briefly. This can be modified after the unit
    #    is placed on the map
    #  @TYPE: unit type
    #  @X, @Y: position where the unit appears, needs to be at the edge of the map
    #  @FACING: unit will appear on the map moving in this direction
    #
    # @UNIT_WML: other, optional keys that can be specified for the unit

    # Create the unit into a variable
    [unit]
        side={SIDE}
        type={TYPE}
        x,y={X},{Y}
        facing={FACING}

        {UNIT_WML}

        to_variable=MUOM_new_unit
    [/unit]

    {EXTRA_ANIM_HEX {X} {Y} {FACING} (
        offset=-2~0:400
        [frame]
            image="$MUOM_new_unit.image~TC({SIDE},magenta):400"
        [/frame]
    )}

    # Place the real unit
    [unstore_unit]
        variable=MUOM_new_unit
        find_vacant=no
    [/unstore_unit]

    {CLEAR_VARIABLE MUOM_new_unit}
#enddef

#define MOVE_UNIT_OFF_MAP_CORE FILTER FACING WML
    # Core macro for MOVE_UNIT_OFF_MAP and MOVE_UNIT_TO_EDGE_AND_OFF_MAP
    # Do not use this by itself
    # @WML: code to be added before moving the unit off the map

    # !!!! Do not use the EXTRA_ANIM macros here, so that there is as little
    # !!!! as possible of a gap between moving the extra WML and moving the unit off

    [store_unit]
        [filter]
            {FILTER}
        [/filter]

        variable=MUOM_unit
    [/store_unit]

    [object]
        silent=yes

        [filter]
            {FILTER}
        [/filter]

        [effect]
            apply_to=new_animation

            [extra_anim]
                flag=disappear
                offset=0~2:400
                [frame]
                    image=$MUOM_unit.image:400
                [/frame]
            [/extra_anim]
        [/effect]
    [/object]
    {CLEAR_VARIABLE MUOM_unit}

    {WML}

    [modify_unit]
        [filter]
            {FILTER}
        [/filter]

        facing={FACING}
    [/modify_unit]

    [animate_unit]
        [filter]
            {FILTER}
        [/filter]

        flag=disappear
    [/animate_unit]
#enddef

#define MOVE_UNIT_TO_EDGE_AND_OFF_MAP FILTER X Y FACING
    # Same as MOVE_UNIT_OFF_MAP, but also moves it to the edge at coordinates
    # @x,@Y first, to make the transition smoother if it is desired to do it
    # in one motion, rather than stopping at the edge with a message or something.
    # @FILTER should match an individual unit, otherwise it doesn't quite work as desired.

    {MOVE_UNIT_OFF_MAP_CORE {FILTER} {FACING} (
        {MOVE_UNIT {FILTER} {X} {Y}}
    )}

    [kill]
        {FILTER}
    [/kill]
#enddef

###########################
# Portal animation macros #
###########################

#define ANIMATED_PORTAL_IMAGE1 OP SCL X Y
    # Used by ANIMATED_PORTAL macro; don't use by itself

    ../misc/blank-hex.png~BLIT(../scenery/whirlpool.png~GS()~CS(0,-50,0)~O({OP})~SCALE({SCL},{SCL}),{X},{Y}):100
#enddef

#define ANIMATED_PORTAL_IMAGE2 OP SCL X Y
    # Used by ANIMATED_PORTAL macro; don't use by itself

    ../misc/blank-hex.png~BLIT(../scenery/whirlpool.png~FL()~GS()~CS(0,-50,0)~O({OP})~SCALE({SCL},{SCL}),{X},{Y}):100
#enddef

#define ANIMATED_PORTAL_IMAGE3 OP SCL X Y
    # Used by ANIMATED_PORTAL macro; don't use by itself

    ../misc/blank-hex.png~BLIT(../scenery/whirlpool.png~FL('vert')~GS()~CS(0,-50,0)~O({OP})~SCALE({SCL},{SCL}),{X},{Y}):100
#enddef

#define ANIMATED_PORTAL_IMAGE4 OP SCL X Y
    # Used by ANIMATED_PORTAL macro; don't use by itself

    ../misc/blank-hex.png~BLIT(../scenery/whirlpool.png~FL('vert','horiz')~GS()~CS(0,-50,0)~O({OP})~SCALE({SCL},{SCL}),{X},{Y}):100
#enddef

#define ANIMATED_PORTAL_NAME
    # Used by SET_PORTAL_ANIM macro; don't use by itself

    {ANIMATED_PORTAL_IMAGE1 0.50 72  0  0},
    {ANIMATED_PORTAL_IMAGE2 0.48 72  0  0},
    {ANIMATED_PORTAL_IMAGE3 0.46 68  2  4},
    {ANIMATED_PORTAL_IMAGE4 0.44 64  4  8},
    {ANIMATED_PORTAL_IMAGE1 0.42 60  6 12},
    {ANIMATED_PORTAL_IMAGE2 0.40 56  8 16},
    {ANIMATED_PORTAL_IMAGE3 0.38 52 10 20},
    {ANIMATED_PORTAL_IMAGE4 0.36 48 12 24},
    {ANIMATED_PORTAL_IMAGE1 0.34 44 14 28},
    {ANIMATED_PORTAL_IMAGE2 0.32 40 16 32},
    {ANIMATED_PORTAL_IMAGE3 0.30 36 18 36},
    {ANIMATED_PORTAL_IMAGE4 0.28 32 20 40},
    {ANIMATED_PORTAL_IMAGE1 0.26 28 22 44},
    {ANIMATED_PORTAL_IMAGE2 0.24 24 24 48},
    {ANIMATED_PORTAL_IMAGE3 0.22 20 26 52},
    {ANIMATED_PORTAL_IMAGE4 0.20 16 28 56},
    {ANIMATED_PORTAL_IMAGE1 0.20 12 30 60},
    {ANIMATED_PORTAL_IMAGE2 0.20 12 30 60},
    {ANIMATED_PORTAL_IMAGE3 0.20 12 30 60},
    {ANIMATED_PORTAL_IMAGE4 0.20 12 30 60},
    {ANIMATED_PORTAL_IMAGE1 0.20 16 28 56},
    {ANIMATED_PORTAL_IMAGE2 0.22 20 26 52},
    {ANIMATED_PORTAL_IMAGE3 0.24 24 24 48},
    {ANIMATED_PORTAL_IMAGE4 0.26 28 22 44},
    {ANIMATED_PORTAL_IMAGE1 0.28 32 20 40},
    {ANIMATED_PORTAL_IMAGE2 0.30 36 18 36},
    {ANIMATED_PORTAL_IMAGE3 0.32 40 16 32},
    {ANIMATED_PORTAL_IMAGE4 0.34 44 14 28},
    {ANIMATED_PORTAL_IMAGE1 0.36 48 12 24},
    {ANIMATED_PORTAL_IMAGE2 0.38 52 10 20},
    {ANIMATED_PORTAL_IMAGE3 0.40 56  8 16},
    {ANIMATED_PORTAL_IMAGE4 0.42 60  6 12},
    {ANIMATED_PORTAL_IMAGE1 0.44 64  4  8},
    {ANIMATED_PORTAL_IMAGE2 0.46 68  2  4}
#enddef

#define SET_PORTAL_ANIM X Y
    # Place an animated whirlpool inside dwarven castle with dark bottom
    # This macro needs to be put at scenario toplevel
    [terrain_graphics]
        x={X}
        y={Y}
        [tile]
            x=0
            y=0
            type=Cud^por
            [image]
                layer=-1
                name="{ANIMATED_PORTAL_NAME}"
            [/image]
        [/tile]
    [/terrain_graphics]
#enddef

#define PORTAL_FRAME IMAGE OP SCL X Y N
    # Used by PORTAL_IN macro; don't use by itself

    [frame]
        image={IMAGE}~O({OP})~SCALE({SCL},{SCL}):100
        #halo=projectiles/fireball-impact-{N}.png~GS()~CS(0,-50,0)~O({OP}):60
        x,y={X},{Y}
        halo_y=-24
        sound=magic-dark-big.ogg
    [/frame]
#enddef

#define PORTAL_IN SIDE X Y IMAGE FACING
    # Play fading-in animation for a unit coming through a portal
    # This places an invisible unit on the map and kills it again afterward,
    # so the hex must be empty for this to work
    # @SIDE: side of the unit (for team coloring)
    # @x,@y: the location of the portal hex
    # @IMAGE: the image to use for the animation
    # @FACING: the direction in which the unit should be facing

    {EXTRA_ANIM_HEX {X} {Y} {FACING} (
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.30  7  0 39  1}
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.30 12  0 36  2}
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.30 17  0 33  3}
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.32 22  0 30  4}
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.34 27  0 27  5}
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.36 32  0 24  6}
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.38 37  0 21  7}
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.40 42  0 18  8}
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.42 47  0 15  9}
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.44 52  0 12 10}
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.46 57  0  9 11}
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.48 63  0  6 12}
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.50 67  0  3 13}
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.60 72  0 -0 14}
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.70 72  0 -2 15}
        {PORTAL_FRAME "{IMAGE}~TC({SIDE},magenta)" 0.80 72  0  0 16}
    )}
#enddef

###########################################
# Miscellaneous animation or image macros #
###########################################

#define MOVE_UNIT_ALONG_PATH ID PATH_X PATH_Y TO_X TO_Y FACING
    # Move a unit from its current position to (TO_X,TO_Y) along the
    # intermediate hexes given by PATH_X and PATH_Y
    # @FACING: facing at end of move

    [store_unit]
        [filter]
            id={ID}
        [/filter]
        variable=unit_to_be_moved
        kill=yes
    [/store_unit]

    [move_unit_fake]
        type=$unit_to_be_moved.type
        side=$unit_to_be_moved.side
        x=$unit_to_be_moved.x,{PATH_X},{TO_X}
        y=$unit_to_be_moved.y,{PATH_Y},{TO_Y}
    [/move_unit_fake]

    {VARIABLE unit_to_be_moved.facing {FACING}}
    [unstore_unit]
        variable=unit_to_be_moved
        x,y={TO_X},{TO_Y}
        find_vacant=no
        check_passability=no
    [/unstore_unit]

    {CLEAR_VARIABLE unit_to_be_moved}
#enddef
